/**
 * Nodeum API
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActiveJobStatus from '../model/ActiveJobStatus';
import Error from '../model/Error';
import MountStatus from '../model/MountStatus';
import NasShare from '../model/NasShare';
import NasShareCollection from '../model/NasShareCollection';

/**
* NasShares service.
* @module api/NasSharesApi
* @version 1.88.0
*/
export default class NasSharesApi {

    /**
    * Constructs a new NasSharesApi. 
    * @alias module:api/NasSharesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createNasShareByNas operation.
     * @callback module:api/NasSharesApi~createNasShareByNasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NasShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new NAS share.
     * **API Key Scope**: nas_shares / create
     * @param {String} nasId Numeric ID or name of NAS.
     * @param {module:model/NasShare} nasShareBody 
     * @param {module:api/NasSharesApi~createNasShareByNasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NasShare}
     */
    createNasShareByNas(nasId, nasShareBody, callback) {
      let postBody = nasShareBody;
      // verify the required parameter 'nasId' is set
      if (nasId === undefined || nasId === null) {
        throw new Error("Missing the required parameter 'nasId' when calling createNasShareByNas");
      }
      // verify the required parameter 'nasShareBody' is set
      if (nasShareBody === undefined || nasShareBody === null) {
        throw new Error("Missing the required parameter 'nasShareBody' when calling createNasShareByNas");
      }

      let pathParams = {
        'nas_id': nasId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NasShare;
      return this.apiClient.callApi(
        '/nas/{nas_id}/nas_shares', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destroyNasShare operation.
     * @callback module:api/NasSharesApi~destroyNasShareCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Destroys a specific NAS share.
     * **API Key Scope**: nas_shares / destroy
     * @param {String} nasShareId Numeric ID or name of NAS share.
     * @param {module:api/NasSharesApi~destroyNasShareCallback} callback The callback function, accepting three arguments: error, data, response
     */
    destroyNasShare(nasShareId, callback) {
      let postBody = null;
      // verify the required parameter 'nasShareId' is set
      if (nasShareId === undefined || nasShareId === null) {
        throw new Error("Missing the required parameter 'nasShareId' when calling destroyNasShare");
      }

      let pathParams = {
        'nas_share_id': nasShareId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/nas_shares/{nas_share_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destroyNasShareByNas operation.
     * @callback module:api/NasSharesApi~destroyNasShareByNasCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Destroys a specific NAS share.
     * **API Key Scope**: nas_shares / destroy
     * @param {String} nasId Numeric ID or name of NAS.
     * @param {String} nasShareId Numeric ID or name of NAS share.
     * @param {module:api/NasSharesApi~destroyNasShareByNasCallback} callback The callback function, accepting three arguments: error, data, response
     */
    destroyNasShareByNas(nasId, nasShareId, callback) {
      let postBody = null;
      // verify the required parameter 'nasId' is set
      if (nasId === undefined || nasId === null) {
        throw new Error("Missing the required parameter 'nasId' when calling destroyNasShareByNas");
      }
      // verify the required parameter 'nasShareId' is set
      if (nasShareId === undefined || nasShareId === null) {
        throw new Error("Missing the required parameter 'nasShareId' when calling destroyNasShareByNas");
      }

      let pathParams = {
        'nas_id': nasId,
        'nas_share_id': nasShareId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/nas/{nas_id}/nas_shares/{nas_share_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destroyNasShareByPool operation.
     * @callback module:api/NasSharesApi~destroyNasShareByPoolCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Destroys a specific NAS share.
     * **API Key Scope**: nas_shares / destroy
     * @param {String} poolId Numeric ID, or name of pool.
     * @param {String} nasShareId Numeric ID or name of NAS share.
     * @param {module:api/NasSharesApi~destroyNasShareByPoolCallback} callback The callback function, accepting three arguments: error, data, response
     */
    destroyNasShareByPool(poolId, nasShareId, callback) {
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling destroyNasShareByPool");
      }
      // verify the required parameter 'nasShareId' is set
      if (nasShareId === undefined || nasShareId === null) {
        throw new Error("Missing the required parameter 'nasShareId' when calling destroyNasShareByPool");
      }

      let pathParams = {
        'pool_id': poolId,
        'nas_share_id': nasShareId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/pools/{pool_id}/nas_shares/{nas_share_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the indexNasShares operation.
     * @callback module:api/NasSharesApi~indexNasSharesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NasShareCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all NAS shares.
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of items to display for pagination.
     * @param {Number} opts.offset The number of items to skip for pagination.
     * @param {Array.<String>} opts.sortBy Sort results by attribute.  Can sort on multiple attributes, separated by `|`. Order direction can be suffixing the attribute by either `:asc` (default) or `:desc`.
     * @param {String} opts.id Filter on id
     * @param {String} opts.name Filter on name
     * @param {String} opts.path Filter on path
     * @param {String} opts.options Filter on options
     * @param {String} opts.username Filter on username
     * @param {String} opts.nasId Filter on NAS id
     * @param {String} opts.poolId Filter on a pool id
     * @param {module:api/NasSharesApi~indexNasSharesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NasShareCollection}
     */
    indexNasShares(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort_by': this.apiClient.buildCollectionParam(opts['sortBy'], 'pipe'),
        'id': opts['id'],
        'name': opts['name'],
        'path': opts['path'],
        'options': opts['options'],
        'username': opts['username'],
        'nas_id': opts['nasId'],
        'pool_id': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NasShareCollection;
      return this.apiClient.callApi(
        '/nas_shares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the indexNasSharesByNas operation.
     * @callback module:api/NasSharesApi~indexNasSharesByNasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NasShareCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all NAS shares.
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param {String} nasId Numeric ID or name of NAS.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of items to display for pagination.
     * @param {Number} opts.offset The number of items to skip for pagination.
     * @param {Array.<String>} opts.sortBy Sort results by attribute.  Can sort on multiple attributes, separated by `|`. Order direction can be suffixing the attribute by either `:asc` (default) or `:desc`.
     * @param {String} opts.id Filter on id
     * @param {String} opts.name Filter on name
     * @param {String} opts.path Filter on path
     * @param {String} opts.options Filter on options
     * @param {String} opts.username Filter on username
     * @param {String} opts.poolId Filter on a pool id
     * @param {module:api/NasSharesApi~indexNasSharesByNasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NasShareCollection}
     */
    indexNasSharesByNas(nasId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nasId' is set
      if (nasId === undefined || nasId === null) {
        throw new Error("Missing the required parameter 'nasId' when calling indexNasSharesByNas");
      }

      let pathParams = {
        'nas_id': nasId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort_by': this.apiClient.buildCollectionParam(opts['sortBy'], 'pipe'),
        'id': opts['id'],
        'name': opts['name'],
        'path': opts['path'],
        'options': opts['options'],
        'username': opts['username'],
        'pool_id': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NasShareCollection;
      return this.apiClient.callApi(
        '/nas/{nas_id}/nas_shares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the indexNasSharesByPool operation.
     * @callback module:api/NasSharesApi~indexNasSharesByPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NasShareCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all NAS shares from pool.
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param {String} poolId Numeric ID, or name of pool.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of items to display for pagination.
     * @param {Number} opts.offset The number of items to skip for pagination.
     * @param {Array.<String>} opts.sortBy Sort results by attribute.  Can sort on multiple attributes, separated by `|`. Order direction can be suffixing the attribute by either `:asc` (default) or `:desc`.
     * @param {String} opts.id Filter on id
     * @param {String} opts.name Filter on name
     * @param {String} opts.path Filter on path
     * @param {String} opts.options Filter on options
     * @param {String} opts.username Filter on username
     * @param {String} opts.nasId Filter on NAS id
     * @param {module:api/NasSharesApi~indexNasSharesByPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NasShareCollection}
     */
    indexNasSharesByPool(poolId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling indexNasSharesByPool");
      }

      let pathParams = {
        'pool_id': poolId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort_by': this.apiClient.buildCollectionParam(opts['sortBy'], 'pipe'),
        'id': opts['id'],
        'name': opts['name'],
        'path': opts['path'],
        'options': opts['options'],
        'username': opts['username'],
        'nas_id': opts['nasId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NasShareCollection;
      return this.apiClient.callApi(
        '/pools/{pool_id}/nas_shares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mountStatusNasShare operation.
     * @callback module:api/NasSharesApi~mountStatusNasShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MountStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get mount status of NAS Share.
     * **API Key Scope**: nas_shares / mount_status
     * @param {String} nasShareId Numeric ID or name of NAS share.
     * @param {module:api/NasSharesApi~mountStatusNasShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MountStatus}
     */
    mountStatusNasShare(nasShareId, callback) {
      let postBody = null;
      // verify the required parameter 'nasShareId' is set
      if (nasShareId === undefined || nasShareId === null) {
        throw new Error("Missing the required parameter 'nasShareId' when calling mountStatusNasShare");
      }

      let pathParams = {
        'nas_share_id': nasShareId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MountStatus;
      return this.apiClient.callApi(
        '/nas_shares/{nas_share_id}/mount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mountStatusNasShareByNas operation.
     * @callback module:api/NasSharesApi~mountStatusNasShareByNasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MountStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get mount status of NAS Share.
     * **API Key Scope**: nas_shares / mount_status
     * @param {String} nasId Numeric ID or name of NAS.
     * @param {String} nasShareId Numeric ID or name of NAS share.
     * @param {module:api/NasSharesApi~mountStatusNasShareByNasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MountStatus}
     */
    mountStatusNasShareByNas(nasId, nasShareId, callback) {
      let postBody = null;
      // verify the required parameter 'nasId' is set
      if (nasId === undefined || nasId === null) {
        throw new Error("Missing the required parameter 'nasId' when calling mountStatusNasShareByNas");
      }
      // verify the required parameter 'nasShareId' is set
      if (nasShareId === undefined || nasShareId === null) {
        throw new Error("Missing the required parameter 'nasShareId' when calling mountStatusNasShareByNas");
      }

      let pathParams = {
        'nas_id': nasId,
        'nas_share_id': nasShareId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MountStatus;
      return this.apiClient.callApi(
        '/nas/{nas_id}/nas_shares/{nas_share_id}/mount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mountStatusNasShareByPool operation.
     * @callback module:api/NasSharesApi~mountStatusNasShareByPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MountStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get mount status of NAS Share.
     * **API Key Scope**: nas_shares / mount_status
     * @param {String} poolId Numeric ID, or name of pool.
     * @param {String} nasShareId Numeric ID or name of NAS share.
     * @param {module:api/NasSharesApi~mountStatusNasShareByPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MountStatus}
     */
    mountStatusNasShareByPool(poolId, nasShareId, callback) {
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling mountStatusNasShareByPool");
      }
      // verify the required parameter 'nasShareId' is set
      if (nasShareId === undefined || nasShareId === null) {
        throw new Error("Missing the required parameter 'nasShareId' when calling mountStatusNasShareByPool");
      }

      let pathParams = {
        'pool_id': poolId,
        'nas_share_id': nasShareId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MountStatus;
      return this.apiClient.callApi(
        '/pools/{pool_id}/nas_shares/{nas_share_id}/mount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showNasShare operation.
     * @callback module:api/NasSharesApi~showNasShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NasShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays a specific NAS share.
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param {String} nasShareId Numeric ID or name of NAS share.
     * @param {module:api/NasSharesApi~showNasShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NasShare}
     */
    showNasShare(nasShareId, callback) {
      let postBody = null;
      // verify the required parameter 'nasShareId' is set
      if (nasShareId === undefined || nasShareId === null) {
        throw new Error("Missing the required parameter 'nasShareId' when calling showNasShare");
      }

      let pathParams = {
        'nas_share_id': nasShareId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NasShare;
      return this.apiClient.callApi(
        '/nas_shares/{nas_share_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showNasShareByNas operation.
     * @callback module:api/NasSharesApi~showNasShareByNasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NasShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays a specific NAS share.
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param {String} nasId Numeric ID or name of NAS.
     * @param {String} nasShareId Numeric ID or name of NAS share.
     * @param {module:api/NasSharesApi~showNasShareByNasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NasShare}
     */
    showNasShareByNas(nasId, nasShareId, callback) {
      let postBody = null;
      // verify the required parameter 'nasId' is set
      if (nasId === undefined || nasId === null) {
        throw new Error("Missing the required parameter 'nasId' when calling showNasShareByNas");
      }
      // verify the required parameter 'nasShareId' is set
      if (nasShareId === undefined || nasShareId === null) {
        throw new Error("Missing the required parameter 'nasShareId' when calling showNasShareByNas");
      }

      let pathParams = {
        'nas_id': nasId,
        'nas_share_id': nasShareId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NasShare;
      return this.apiClient.callApi(
        '/nas/{nas_id}/nas_shares/{nas_share_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showNasShareByPool operation.
     * @callback module:api/NasSharesApi~showNasShareByPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NasShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays a specific NAS share.
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param {String} poolId Numeric ID, or name of pool.
     * @param {String} nasShareId Numeric ID or name of NAS share.
     * @param {module:api/NasSharesApi~showNasShareByPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NasShare}
     */
    showNasShareByPool(poolId, nasShareId, callback) {
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling showNasShareByPool");
      }
      // verify the required parameter 'nasShareId' is set
      if (nasShareId === undefined || nasShareId === null) {
        throw new Error("Missing the required parameter 'nasShareId' when calling showNasShareByPool");
      }

      let pathParams = {
        'pool_id': poolId,
        'nas_share_id': nasShareId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NasShare;
      return this.apiClient.callApi(
        '/pools/{pool_id}/nas_shares/{nas_share_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testNasShare operation.
     * @callback module:api/NasSharesApi~testNasShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActiveJobStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test an unsaved NAS Share.
     * **API Key Scope**: nas_shares / test
     * @param {String} nasId Numeric ID or name of NAS.
     * @param {module:model/NasShare} nasShareBody 
     * @param {module:api/NasSharesApi~testNasShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActiveJobStatus}
     */
    testNasShare(nasId, nasShareBody, callback) {
      let postBody = nasShareBody;
      // verify the required parameter 'nasId' is set
      if (nasId === undefined || nasId === null) {
        throw new Error("Missing the required parameter 'nasId' when calling testNasShare");
      }
      // verify the required parameter 'nasShareBody' is set
      if (nasShareBody === undefined || nasShareBody === null) {
        throw new Error("Missing the required parameter 'nasShareBody' when calling testNasShare");
      }

      let pathParams = {
        'nas_id': nasId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'queued', 'working', 'failed'];
      let returnType = ActiveJobStatus;
      return this.apiClient.callApi(
        '/nas/{nas_id}/nas_shares/-/test', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testResultNasShare operation.
     * @callback module:api/NasSharesApi~testResultNasShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActiveJobStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check result of a NAS Share test job.
     * **API Key Scope**: nas_shares / test
     * @param {String} nasId Numeric ID or name of NAS.
     * @param {String} jobId ID of active job
     * @param {module:api/NasSharesApi~testResultNasShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActiveJobStatus}
     */
    testResultNasShare(nasId, jobId, callback) {
      let postBody = null;
      // verify the required parameter 'nasId' is set
      if (nasId === undefined || nasId === null) {
        throw new Error("Missing the required parameter 'nasId' when calling testResultNasShare");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling testResultNasShare");
      }

      let pathParams = {
        'nas_id': nasId
      };
      let queryParams = {
        'job_id': jobId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'queued', 'working', 'failed'];
      let returnType = ActiveJobStatus;
      return this.apiClient.callApi(
        '/nas/{nas_id}/nas_shares/-/test', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNasShare operation.
     * @callback module:api/NasSharesApi~updateNasShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NasShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a specific NAS share.
     * **API Key Scope**: nas_shares / update
     * @param {String} nasShareId Numeric ID or name of NAS share.
     * @param {module:model/NasShare} nasShareBody 
     * @param {module:api/NasSharesApi~updateNasShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NasShare}
     */
    updateNasShare(nasShareId, nasShareBody, callback) {
      let postBody = nasShareBody;
      // verify the required parameter 'nasShareId' is set
      if (nasShareId === undefined || nasShareId === null) {
        throw new Error("Missing the required parameter 'nasShareId' when calling updateNasShare");
      }
      // verify the required parameter 'nasShareBody' is set
      if (nasShareBody === undefined || nasShareBody === null) {
        throw new Error("Missing the required parameter 'nasShareBody' when calling updateNasShare");
      }

      let pathParams = {
        'nas_share_id': nasShareId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NasShare;
      return this.apiClient.callApi(
        '/nas_shares/{nas_share_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNasShareByNas operation.
     * @callback module:api/NasSharesApi~updateNasShareByNasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NasShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a specific NAS share.
     * **API Key Scope**: nas_shares / update
     * @param {String} nasId Numeric ID or name of NAS.
     * @param {String} nasShareId Numeric ID or name of NAS share.
     * @param {module:model/NasShare} nasShareBody 
     * @param {module:api/NasSharesApi~updateNasShareByNasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NasShare}
     */
    updateNasShareByNas(nasId, nasShareId, nasShareBody, callback) {
      let postBody = nasShareBody;
      // verify the required parameter 'nasId' is set
      if (nasId === undefined || nasId === null) {
        throw new Error("Missing the required parameter 'nasId' when calling updateNasShareByNas");
      }
      // verify the required parameter 'nasShareId' is set
      if (nasShareId === undefined || nasShareId === null) {
        throw new Error("Missing the required parameter 'nasShareId' when calling updateNasShareByNas");
      }
      // verify the required parameter 'nasShareBody' is set
      if (nasShareBody === undefined || nasShareBody === null) {
        throw new Error("Missing the required parameter 'nasShareBody' when calling updateNasShareByNas");
      }

      let pathParams = {
        'nas_id': nasId,
        'nas_share_id': nasShareId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NasShare;
      return this.apiClient.callApi(
        '/nas/{nas_id}/nas_shares/{nas_share_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNasShareByPool operation.
     * @callback module:api/NasSharesApi~updateNasShareByPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NasShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a specific NAS share.
     * **API Key Scope**: nas_shares / update
     * @param {String} poolId Numeric ID, or name of pool.
     * @param {String} nasShareId Numeric ID or name of NAS share.
     * @param {module:model/NasShare} nasShareBody 
     * @param {module:api/NasSharesApi~updateNasShareByPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NasShare}
     */
    updateNasShareByPool(poolId, nasShareId, nasShareBody, callback) {
      let postBody = nasShareBody;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling updateNasShareByPool");
      }
      // verify the required parameter 'nasShareId' is set
      if (nasShareId === undefined || nasShareId === null) {
        throw new Error("Missing the required parameter 'nasShareId' when calling updateNasShareByPool");
      }
      // verify the required parameter 'nasShareBody' is set
      if (nasShareBody === undefined || nasShareBody === null) {
        throw new Error("Missing the required parameter 'nasShareBody' when calling updateNasShareByPool");
      }

      let pathParams = {
        'pool_id': poolId,
        'nas_share_id': nasShareId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NasShare;
      return this.apiClient.callApi(
        '/pools/{pool_id}/nas_shares/{nas_share_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
