/**
 * Nodeum API
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import TaskSchedule from '../model/TaskSchedule';
import TaskScheduleCollection from '../model/TaskScheduleCollection';

/**
* TaskSchedules service.
* @module api/TaskSchedulesApi
* @version 1.85.1
*/
export default class TaskSchedulesApi {

    /**
    * Constructs a new TaskSchedulesApi. 
    * @alias module:api/TaskSchedulesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTaskSchedule operation.
     * @callback module:api/TaskSchedulesApi~createTaskScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskSchedule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new task schedule. Only one should be created.
     * **API Key Scope**: task_schedules / create
     * @param {String} taskId Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID.
     * @param {module:model/TaskSchedule} taskScheduleBody 
     * @param {module:api/TaskSchedulesApi~createTaskScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskSchedule}
     */
    createTaskSchedule(taskId, taskScheduleBody, callback) {
      let postBody = taskScheduleBody;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling createTaskSchedule");
      }
      // verify the required parameter 'taskScheduleBody' is set
      if (taskScheduleBody === undefined || taskScheduleBody === null) {
        throw new Error("Missing the required parameter 'taskScheduleBody' when calling createTaskSchedule");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TaskSchedule;
      return this.apiClient.callApi(
        '/tasks/{task_id}/task_schedule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destroyTaskSchedule operation.
     * @callback module:api/TaskSchedulesApi~destroyTaskScheduleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Destroys the task schedule.
     * **API Key Scope**: task_schedules / destroy
     * @param {String} taskId Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID.
     * @param {module:api/TaskSchedulesApi~destroyTaskScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    destroyTaskSchedule(taskId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling destroyTaskSchedule");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{task_id}/task_schedule', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the indexTaskSchedules operation.
     * @callback module:api/TaskSchedulesApi~indexTaskSchedulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskScheduleCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all task schedules.
     * **API Key Scope**: task_schedules / index
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.withNext Display the next scheduled date, and information about missing executions. (default to true)
     * @param {Number} opts.limit The number of items to display for pagination.
     * @param {Number} opts.offset The number of items to skip for pagination.
     * @param {Array.<String>} opts.sortBy Sort results by attribute.  Can sort on multiple attributes, separated by `|`. Order direction can be suffixing the attribute by either `:asc` (default) or `:desc`.
     * @param {String} opts.id Filter on id
     * @param {String} opts.rrule Filter on RRule of schedule
     * @param {String} opts.done Filter on done schedule
     * @param {String} opts.taskId Filter on task id
     * @param {module:api/TaskSchedulesApi~indexTaskSchedulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskScheduleCollection}
     */
    indexTaskSchedules(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'with_next': opts['withNext'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort_by': this.apiClient.buildCollectionParam(opts['sortBy'], 'pipe'),
        'id': opts['id'],
        'rrule': opts['rrule'],
        'done': opts['done'],
        'task_id': opts['taskId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TaskScheduleCollection;
      return this.apiClient.callApi(
        '/task_schedules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showTaskSchedule operation.
     * @callback module:api/TaskSchedulesApi~showTaskScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskSchedule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays the task schedule.
     * **API Key Scope**: task_schedules / show
     * @param {String} taskId Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID.
     * @param {module:api/TaskSchedulesApi~showTaskScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskSchedule}
     */
    showTaskSchedule(taskId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling showTaskSchedule");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TaskSchedule;
      return this.apiClient.callApi(
        '/tasks/{task_id}/task_schedule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTaskSchedule operation.
     * @callback module:api/TaskSchedulesApi~updateTaskScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskSchedule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the existing task schedule.
     * **API Key Scope**: task_schedules / update
     * @param {String} taskId Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID.
     * @param {module:model/TaskSchedule} taskScheduleBody 
     * @param {module:api/TaskSchedulesApi~updateTaskScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskSchedule}
     */
    updateTaskSchedule(taskId, taskScheduleBody, callback) {
      let postBody = taskScheduleBody;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling updateTaskSchedule");
      }
      // verify the required parameter 'taskScheduleBody' is set
      if (taskScheduleBody === undefined || taskScheduleBody === null) {
        throw new Error("Missing the required parameter 'taskScheduleBody' when calling updateTaskSchedule");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TaskSchedule;
      return this.apiClient.callApi(
        '/tasks/{task_id}/task_schedule', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
