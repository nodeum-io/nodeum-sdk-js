/**
 * Nodeum API
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ImportFileCollection from '../model/ImportFileCollection';
import ImportFileWithPath from '../model/ImportFileWithPath';
import NodeumFileCollection from '../model/NodeumFileCollection';
import NodeumFileWithPath from '../model/NodeumFileWithPath';
import OnTapesFile from '../model/OnTapesFile';
import OnTapesFileCollection from '../model/OnTapesFileCollection';
import TapeCollection from '../model/TapeCollection';

/**
* Files service.
* @module api/FilesApi
* @version 1.86.0
*/
export default class FilesApi {

    /**
    * Constructs a new FilesApi. 
    * @alias module:api/FilesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the filesChildren operation.
     * @callback module:api/FilesApi~filesChildrenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeumFileCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param {Number} fileParentId Numeric ID of parent folder.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of items to display for pagination.
     * @param {Number} opts.offset The number of items to skip for pagination.
     * @param {String} opts.fileId Filter on file id
     * @param {String} opts.name Filter on name
     * @param {String} opts.type Filter on type
     * @param {String} opts.permission Filter on permission
     * @param {String} opts.size Filter on size
     * @param {String} opts.changeDate Filter on change date
     * @param {String} opts.modificationDate Filter on modification date
     * @param {String} opts.accessDate Filter on access date
     * @param {String} opts.gid Filter on gid
     * @param {String} opts.uid Filter on uid
     * @param {module:api/FilesApi~filesChildrenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeumFileCollection}
     */
    filesChildren(fileParentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fileParentId' is set
      if (fileParentId === undefined || fileParentId === null) {
        throw new Error("Missing the required parameter 'fileParentId' when calling filesChildren");
      }

      let pathParams = {
        'file_parent_id': fileParentId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'file_id': opts['fileId'],
        'name': opts['name'],
        'type': opts['type'],
        'permission': opts['permission'],
        'size': opts['size'],
        'change_date': opts['changeDate'],
        'modification_date': opts['modificationDate'],
        'access_date': opts['accessDate'],
        'gid': opts['gid'],
        'uid': opts['uid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeumFileCollection;
      return this.apiClient.callApi(
        '/files/{file_parent_id}/children', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesChildrenByContainer operation.
     * @callback module:api/FilesApi~filesChildrenByContainerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeumFileCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param {String} containerId Numeric ID or name of container.
     * @param {Number} fileParentId Numeric ID of parent folder.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of items to display for pagination.
     * @param {Number} opts.offset The number of items to skip for pagination.
     * @param {String} opts.fileId Filter on file id
     * @param {String} opts.name Filter on name
     * @param {String} opts.type Filter on type
     * @param {String} opts.permission Filter on permission
     * @param {String} opts.size Filter on size
     * @param {String} opts.changeDate Filter on change date
     * @param {String} opts.modificationDate Filter on modification date
     * @param {String} opts.accessDate Filter on access date
     * @param {String} opts.gid Filter on gid
     * @param {String} opts.uid Filter on uid
     * @param {module:api/FilesApi~filesChildrenByContainerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeumFileCollection}
     */
    filesChildrenByContainer(containerId, fileParentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'containerId' is set
      if (containerId === undefined || containerId === null) {
        throw new Error("Missing the required parameter 'containerId' when calling filesChildrenByContainer");
      }
      // verify the required parameter 'fileParentId' is set
      if (fileParentId === undefined || fileParentId === null) {
        throw new Error("Missing the required parameter 'fileParentId' when calling filesChildrenByContainer");
      }

      let pathParams = {
        'container_id': containerId,
        'file_parent_id': fileParentId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'file_id': opts['fileId'],
        'name': opts['name'],
        'type': opts['type'],
        'permission': opts['permission'],
        'size': opts['size'],
        'change_date': opts['changeDate'],
        'modification_date': opts['modificationDate'],
        'access_date': opts['accessDate'],
        'gid': opts['gid'],
        'uid': opts['uid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeumFileCollection;
      return this.apiClient.callApi(
        '/containers/{container_id}/files/{file_parent_id}/children', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesChildrenByPool operation.
     * @callback module:api/FilesApi~filesChildrenByPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeumFileCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param {String} poolId Numeric ID, or name of pool.
     * @param {Number} fileParentId Numeric ID of parent folder.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of items to display for pagination.
     * @param {Number} opts.offset The number of items to skip for pagination.
     * @param {String} opts.fileId Filter on file id
     * @param {String} opts.name Filter on name
     * @param {String} opts.type Filter on type
     * @param {String} opts.permission Filter on permission
     * @param {String} opts.size Filter on size
     * @param {String} opts.changeDate Filter on change date
     * @param {String} opts.modificationDate Filter on modification date
     * @param {String} opts.accessDate Filter on access date
     * @param {String} opts.gid Filter on gid
     * @param {String} opts.uid Filter on uid
     * @param {module:api/FilesApi~filesChildrenByPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeumFileCollection}
     */
    filesChildrenByPool(poolId, fileParentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling filesChildrenByPool");
      }
      // verify the required parameter 'fileParentId' is set
      if (fileParentId === undefined || fileParentId === null) {
        throw new Error("Missing the required parameter 'fileParentId' when calling filesChildrenByPool");
      }

      let pathParams = {
        'pool_id': poolId,
        'file_parent_id': fileParentId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'file_id': opts['fileId'],
        'name': opts['name'],
        'type': opts['type'],
        'permission': opts['permission'],
        'size': opts['size'],
        'change_date': opts['changeDate'],
        'modification_date': opts['modificationDate'],
        'access_date': opts['accessDate'],
        'gid': opts['gid'],
        'uid': opts['uid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeumFileCollection;
      return this.apiClient.callApi(
        '/pools/{pool_id}/files/{file_parent_id}/children', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesChildrenByTask operation.
     * @callback module:api/FilesApi~filesChildrenByTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeumFileCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param {String} taskId Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID.
     * @param {Number} fileParentId Numeric ID of parent folder.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of items to display for pagination.
     * @param {Number} opts.offset The number of items to skip for pagination.
     * @param {String} opts.fileId Filter on file id
     * @param {String} opts.name Filter on name
     * @param {String} opts.type Filter on type
     * @param {String} opts.permission Filter on permission
     * @param {String} opts.size Filter on size
     * @param {String} opts.changeDate Filter on change date
     * @param {String} opts.modificationDate Filter on modification date
     * @param {String} opts.accessDate Filter on access date
     * @param {String} opts.gid Filter on gid
     * @param {String} opts.uid Filter on uid
     * @param {module:api/FilesApi~filesChildrenByTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeumFileCollection}
     */
    filesChildrenByTask(taskId, fileParentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling filesChildrenByTask");
      }
      // verify the required parameter 'fileParentId' is set
      if (fileParentId === undefined || fileParentId === null) {
        throw new Error("Missing the required parameter 'fileParentId' when calling filesChildrenByTask");
      }

      let pathParams = {
        'task_id': taskId,
        'file_parent_id': fileParentId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'file_id': opts['fileId'],
        'name': opts['name'],
        'type': opts['type'],
        'permission': opts['permission'],
        'size': opts['size'],
        'change_date': opts['changeDate'],
        'modification_date': opts['modificationDate'],
        'access_date': opts['accessDate'],
        'gid': opts['gid'],
        'uid': opts['uid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeumFileCollection;
      return this.apiClient.callApi(
        '/tasks/{task_id}/files/{file_parent_id}/children', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesChildrenByTaskExecution operation.
     * @callback module:api/FilesApi~filesChildrenByTaskExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeumFileCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param {String} taskExecutionId Numeric ID of task execution.
     * @param {Number} fileParentId Numeric ID of parent folder.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of items to display for pagination.
     * @param {Number} opts.offset The number of items to skip for pagination.
     * @param {String} opts.fileId Filter on file id
     * @param {String} opts.name Filter on name
     * @param {String} opts.type Filter on type
     * @param {String} opts.permission Filter on permission
     * @param {String} opts.size Filter on size
     * @param {String} opts.changeDate Filter on change date
     * @param {String} opts.modificationDate Filter on modification date
     * @param {String} opts.accessDate Filter on access date
     * @param {String} opts.gid Filter on gid
     * @param {String} opts.uid Filter on uid
     * @param {module:api/FilesApi~filesChildrenByTaskExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeumFileCollection}
     */
    filesChildrenByTaskExecution(taskExecutionId, fileParentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskExecutionId' is set
      if (taskExecutionId === undefined || taskExecutionId === null) {
        throw new Error("Missing the required parameter 'taskExecutionId' when calling filesChildrenByTaskExecution");
      }
      // verify the required parameter 'fileParentId' is set
      if (fileParentId === undefined || fileParentId === null) {
        throw new Error("Missing the required parameter 'fileParentId' when calling filesChildrenByTaskExecution");
      }

      let pathParams = {
        'task_execution_id': taskExecutionId,
        'file_parent_id': fileParentId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'file_id': opts['fileId'],
        'name': opts['name'],
        'type': opts['type'],
        'permission': opts['permission'],
        'size': opts['size'],
        'change_date': opts['changeDate'],
        'modification_date': opts['modificationDate'],
        'access_date': opts['accessDate'],
        'gid': opts['gid'],
        'uid': opts['uid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeumFileCollection;
      return this.apiClient.callApi(
        '/task_executions/{task_execution_id}/files/{file_parent_id}/children', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesChildrenByTaskExecutionByTask operation.
     * @callback module:api/FilesApi~filesChildrenByTaskExecutionByTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeumFileCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param {String} taskId Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID.
     * @param {String} taskExecutionId Numeric ID of task execution.
     * @param {Number} fileParentId Numeric ID of parent folder.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of items to display for pagination.
     * @param {Number} opts.offset The number of items to skip for pagination.
     * @param {String} opts.fileId Filter on file id
     * @param {String} opts.name Filter on name
     * @param {String} opts.type Filter on type
     * @param {String} opts.permission Filter on permission
     * @param {String} opts.size Filter on size
     * @param {String} opts.changeDate Filter on change date
     * @param {String} opts.modificationDate Filter on modification date
     * @param {String} opts.accessDate Filter on access date
     * @param {String} opts.gid Filter on gid
     * @param {String} opts.uid Filter on uid
     * @param {module:api/FilesApi~filesChildrenByTaskExecutionByTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeumFileCollection}
     */
    filesChildrenByTaskExecutionByTask(taskId, taskExecutionId, fileParentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling filesChildrenByTaskExecutionByTask");
      }
      // verify the required parameter 'taskExecutionId' is set
      if (taskExecutionId === undefined || taskExecutionId === null) {
        throw new Error("Missing the required parameter 'taskExecutionId' when calling filesChildrenByTaskExecutionByTask");
      }
      // verify the required parameter 'fileParentId' is set
      if (fileParentId === undefined || fileParentId === null) {
        throw new Error("Missing the required parameter 'fileParentId' when calling filesChildrenByTaskExecutionByTask");
      }

      let pathParams = {
        'task_id': taskId,
        'task_execution_id': taskExecutionId,
        'file_parent_id': fileParentId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'file_id': opts['fileId'],
        'name': opts['name'],
        'type': opts['type'],
        'permission': opts['permission'],
        'size': opts['size'],
        'change_date': opts['changeDate'],
        'modification_date': opts['modificationDate'],
        'access_date': opts['accessDate'],
        'gid': opts['gid'],
        'uid': opts['uid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeumFileCollection;
      return this.apiClient.callApi(
        '/tasks/{task_id}/task_executions/{task_execution_id}/files/{file_parent_id}/children', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importFilesChildrenByPool operation.
     * @callback module:api/FilesApi~importFilesChildrenByPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportFileCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists files under a specific folder on tape of pools, specific for Data Exchange.
     * **API Key Scope**: import_files / index
     * @param {String} poolId Numeric ID, or name of pool.
     * @param {Number} fileParentId Numeric ID of parent folder.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of items to display for pagination.
     * @param {Number} opts.offset The number of items to skip for pagination.
     * @param {String} opts.fileId Filter on file id
     * @param {String} opts.name Filter on name
     * @param {String} opts.type Filter on type
     * @param {String} opts.permission Filter on permission
     * @param {String} opts.size Filter on size
     * @param {String} opts.changeDate Filter on change date
     * @param {String} opts.modificationDate Filter on modification date
     * @param {String} opts.accessDate Filter on access date
     * @param {String} opts.gid Filter on gid
     * @param {String} opts.uid Filter on uid
     * @param {module:api/FilesApi~importFilesChildrenByPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportFileCollection}
     */
    importFilesChildrenByPool(poolId, fileParentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling importFilesChildrenByPool");
      }
      // verify the required parameter 'fileParentId' is set
      if (fileParentId === undefined || fileParentId === null) {
        throw new Error("Missing the required parameter 'fileParentId' when calling importFilesChildrenByPool");
      }

      let pathParams = {
        'pool_id': poolId,
        'file_parent_id': fileParentId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'file_id': opts['fileId'],
        'name': opts['name'],
        'type': opts['type'],
        'permission': opts['permission'],
        'size': opts['size'],
        'change_date': opts['changeDate'],
        'modification_date': opts['modificationDate'],
        'access_date': opts['accessDate'],
        'gid': opts['gid'],
        'uid': opts['uid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImportFileCollection;
      return this.apiClient.callApi(
        '/pools/{pool_id}/import_files/{file_parent_id}/children', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the indexFiles operation.
     * @callback module:api/FilesApi~indexFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeumFileCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of items to display for pagination.
     * @param {Number} opts.offset The number of items to skip for pagination.
     * @param {String} opts.fileId Filter on file id
     * @param {String} opts.name Filter on name
     * @param {String} opts.type Filter on type
     * @param {String} opts.permission Filter on permission
     * @param {String} opts.size Filter on size
     * @param {String} opts.changeDate Filter on change date
     * @param {String} opts.modificationDate Filter on modification date
     * @param {String} opts.accessDate Filter on access date
     * @param {String} opts.gid Filter on gid
     * @param {String} opts.uid Filter on uid
     * @param {module:api/FilesApi~indexFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeumFileCollection}
     */
    indexFiles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'file_id': opts['fileId'],
        'name': opts['name'],
        'type': opts['type'],
        'permission': opts['permission'],
        'size': opts['size'],
        'change_date': opts['changeDate'],
        'modification_date': opts['modificationDate'],
        'access_date': opts['accessDate'],
        'gid': opts['gid'],
        'uid': opts['uid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeumFileCollection;
      return this.apiClient.callApi(
        '/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the indexFilesByContainer operation.
     * @callback module:api/FilesApi~indexFilesByContainerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeumFileCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param {String} containerId Numeric ID or name of container.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of items to display for pagination.
     * @param {Number} opts.offset The number of items to skip for pagination.
     * @param {String} opts.fileId Filter on file id
     * @param {String} opts.name Filter on name
     * @param {String} opts.type Filter on type
     * @param {String} opts.permission Filter on permission
     * @param {String} opts.size Filter on size
     * @param {String} opts.changeDate Filter on change date
     * @param {String} opts.modificationDate Filter on modification date
     * @param {String} opts.accessDate Filter on access date
     * @param {String} opts.gid Filter on gid
     * @param {String} opts.uid Filter on uid
     * @param {module:api/FilesApi~indexFilesByContainerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeumFileCollection}
     */
    indexFilesByContainer(containerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'containerId' is set
      if (containerId === undefined || containerId === null) {
        throw new Error("Missing the required parameter 'containerId' when calling indexFilesByContainer");
      }

      let pathParams = {
        'container_id': containerId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'file_id': opts['fileId'],
        'name': opts['name'],
        'type': opts['type'],
        'permission': opts['permission'],
        'size': opts['size'],
        'change_date': opts['changeDate'],
        'modification_date': opts['modificationDate'],
        'access_date': opts['accessDate'],
        'gid': opts['gid'],
        'uid': opts['uid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeumFileCollection;
      return this.apiClient.callApi(
        '/containers/{container_id}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the indexFilesByPool operation.
     * @callback module:api/FilesApi~indexFilesByPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeumFileCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param {String} poolId Numeric ID, or name of pool.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of items to display for pagination.
     * @param {Number} opts.offset The number of items to skip for pagination.
     * @param {String} opts.fileId Filter on file id
     * @param {String} opts.name Filter on name
     * @param {String} opts.type Filter on type
     * @param {String} opts.permission Filter on permission
     * @param {String} opts.size Filter on size
     * @param {String} opts.changeDate Filter on change date
     * @param {String} opts.modificationDate Filter on modification date
     * @param {String} opts.accessDate Filter on access date
     * @param {String} opts.gid Filter on gid
     * @param {String} opts.uid Filter on uid
     * @param {module:api/FilesApi~indexFilesByPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeumFileCollection}
     */
    indexFilesByPool(poolId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling indexFilesByPool");
      }

      let pathParams = {
        'pool_id': poolId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'file_id': opts['fileId'],
        'name': opts['name'],
        'type': opts['type'],
        'permission': opts['permission'],
        'size': opts['size'],
        'change_date': opts['changeDate'],
        'modification_date': opts['modificationDate'],
        'access_date': opts['accessDate'],
        'gid': opts['gid'],
        'uid': opts['uid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeumFileCollection;
      return this.apiClient.callApi(
        '/pools/{pool_id}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the indexFilesByTask operation.
     * @callback module:api/FilesApi~indexFilesByTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeumFileCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param {String} taskId Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of items to display for pagination.
     * @param {Number} opts.offset The number of items to skip for pagination.
     * @param {String} opts.fileId Filter on file id
     * @param {String} opts.name Filter on name
     * @param {String} opts.type Filter on type
     * @param {String} opts.permission Filter on permission
     * @param {String} opts.size Filter on size
     * @param {String} opts.changeDate Filter on change date
     * @param {String} opts.modificationDate Filter on modification date
     * @param {String} opts.accessDate Filter on access date
     * @param {String} opts.gid Filter on gid
     * @param {String} opts.uid Filter on uid
     * @param {module:api/FilesApi~indexFilesByTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeumFileCollection}
     */
    indexFilesByTask(taskId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling indexFilesByTask");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'file_id': opts['fileId'],
        'name': opts['name'],
        'type': opts['type'],
        'permission': opts['permission'],
        'size': opts['size'],
        'change_date': opts['changeDate'],
        'modification_date': opts['modificationDate'],
        'access_date': opts['accessDate'],
        'gid': opts['gid'],
        'uid': opts['uid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeumFileCollection;
      return this.apiClient.callApi(
        '/tasks/{task_id}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the indexFilesByTaskExecution operation.
     * @callback module:api/FilesApi~indexFilesByTaskExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeumFileCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param {String} taskExecutionId Numeric ID of task execution.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of items to display for pagination.
     * @param {Number} opts.offset The number of items to skip for pagination.
     * @param {String} opts.fileId Filter on file id
     * @param {String} opts.name Filter on name
     * @param {String} opts.type Filter on type
     * @param {String} opts.permission Filter on permission
     * @param {String} opts.size Filter on size
     * @param {String} opts.changeDate Filter on change date
     * @param {String} opts.modificationDate Filter on modification date
     * @param {String} opts.accessDate Filter on access date
     * @param {String} opts.gid Filter on gid
     * @param {String} opts.uid Filter on uid
     * @param {module:api/FilesApi~indexFilesByTaskExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeumFileCollection}
     */
    indexFilesByTaskExecution(taskExecutionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskExecutionId' is set
      if (taskExecutionId === undefined || taskExecutionId === null) {
        throw new Error("Missing the required parameter 'taskExecutionId' when calling indexFilesByTaskExecution");
      }

      let pathParams = {
        'task_execution_id': taskExecutionId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'file_id': opts['fileId'],
        'name': opts['name'],
        'type': opts['type'],
        'permission': opts['permission'],
        'size': opts['size'],
        'change_date': opts['changeDate'],
        'modification_date': opts['modificationDate'],
        'access_date': opts['accessDate'],
        'gid': opts['gid'],
        'uid': opts['uid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeumFileCollection;
      return this.apiClient.callApi(
        '/task_executions/{task_execution_id}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the indexFilesByTaskExecutionByTask operation.
     * @callback module:api/FilesApi~indexFilesByTaskExecutionByTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeumFileCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param {String} taskId Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID.
     * @param {String} taskExecutionId Numeric ID of task execution.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of items to display for pagination.
     * @param {Number} opts.offset The number of items to skip for pagination.
     * @param {String} opts.fileId Filter on file id
     * @param {String} opts.name Filter on name
     * @param {String} opts.type Filter on type
     * @param {String} opts.permission Filter on permission
     * @param {String} opts.size Filter on size
     * @param {String} opts.changeDate Filter on change date
     * @param {String} opts.modificationDate Filter on modification date
     * @param {String} opts.accessDate Filter on access date
     * @param {String} opts.gid Filter on gid
     * @param {String} opts.uid Filter on uid
     * @param {module:api/FilesApi~indexFilesByTaskExecutionByTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeumFileCollection}
     */
    indexFilesByTaskExecutionByTask(taskId, taskExecutionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling indexFilesByTaskExecutionByTask");
      }
      // verify the required parameter 'taskExecutionId' is set
      if (taskExecutionId === undefined || taskExecutionId === null) {
        throw new Error("Missing the required parameter 'taskExecutionId' when calling indexFilesByTaskExecutionByTask");
      }

      let pathParams = {
        'task_id': taskId,
        'task_execution_id': taskExecutionId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'file_id': opts['fileId'],
        'name': opts['name'],
        'type': opts['type'],
        'permission': opts['permission'],
        'size': opts['size'],
        'change_date': opts['changeDate'],
        'modification_date': opts['modificationDate'],
        'access_date': opts['accessDate'],
        'gid': opts['gid'],
        'uid': opts['uid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeumFileCollection;
      return this.apiClient.callApi(
        '/tasks/{task_id}/task_executions/{task_execution_id}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the indexImportFilesByPool operation.
     * @callback module:api/FilesApi~indexImportFilesByPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportFileCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists files on root of tape of pools, specific for Data Exchange.
     * **API Key Scope**: import_files / index
     * @param {String} poolId Numeric ID, or name of pool.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of items to display for pagination.
     * @param {Number} opts.offset The number of items to skip for pagination.
     * @param {String} opts.fileId Filter on file id
     * @param {String} opts.name Filter on name
     * @param {String} opts.type Filter on type
     * @param {String} opts.permission Filter on permission
     * @param {String} opts.size Filter on size
     * @param {String} opts.changeDate Filter on change date
     * @param {String} opts.modificationDate Filter on modification date
     * @param {String} opts.accessDate Filter on access date
     * @param {String} opts.gid Filter on gid
     * @param {String} opts.uid Filter on uid
     * @param {module:api/FilesApi~indexImportFilesByPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportFileCollection}
     */
    indexImportFilesByPool(poolId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling indexImportFilesByPool");
      }

      let pathParams = {
        'pool_id': poolId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'file_id': opts['fileId'],
        'name': opts['name'],
        'type': opts['type'],
        'permission': opts['permission'],
        'size': opts['size'],
        'change_date': opts['changeDate'],
        'modification_date': opts['modificationDate'],
        'access_date': opts['accessDate'],
        'gid': opts['gid'],
        'uid': opts['uid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImportFileCollection;
      return this.apiClient.callApi(
        '/pools/{pool_id}/import_files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the indexOnTapesFilesByPool operation.
     * @callback module:api/FilesApi~indexOnTapesFilesByPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OnTapesFileCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists files on root of tape of pools, specific for Active and Offline.
     * **API Key Scope**: on_tapes_files / index
     * @param {String} poolId Numeric ID, or name of pool.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of items to display for pagination.
     * @param {Number} opts.offset The number of items to skip for pagination.
     * @param {String} opts.name Filter on name
     * @param {String} opts.type Filter on type
     * @param {String} opts.size Filter on size
     * @param {module:api/FilesApi~indexOnTapesFilesByPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OnTapesFileCollection}
     */
    indexOnTapesFilesByPool(poolId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling indexOnTapesFilesByPool");
      }

      let pathParams = {
        'pool_id': poolId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'name': opts['name'],
        'type': opts['type'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OnTapesFileCollection;
      return this.apiClient.callApi(
        '/pools/{pool_id}/on_tapes_files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the indexTapesByFileByPool operation.
     * @callback module:api/FilesApi~indexTapesByFileByPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TapeCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays tapes containing specific file, related to the specific pool.
     * **API Key Scope**: files / tapes
     * @param {String} poolId Numeric ID, or name of pool.
     * @param {Number} fileId Numeric ID of file.
     * @param {module:api/FilesApi~indexTapesByFileByPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TapeCollection}
     */
    indexTapesByFileByPool(poolId, fileId, callback) {
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling indexTapesByFileByPool");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling indexTapesByFileByPool");
      }

      let pathParams = {
        'pool_id': poolId,
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TapeCollection;
      return this.apiClient.callApi(
        '/pools/{pool_id}/files/{file_id}/tapes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the indexTapesByFileByTask operation.
     * @callback module:api/FilesApi~indexTapesByFileByTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TapeCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays tapes containing specific file, related to the specific task.
     * **API Key Scope**: files / tapes
     * @param {String} taskId Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID.
     * @param {Number} fileId Numeric ID of file.
     * @param {module:api/FilesApi~indexTapesByFileByTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TapeCollection}
     */
    indexTapesByFileByTask(taskId, fileId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling indexTapesByFileByTask");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling indexTapesByFileByTask");
      }

      let pathParams = {
        'task_id': taskId,
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TapeCollection;
      return this.apiClient.callApi(
        '/tasks/{task_id}/files/{file_id}/tapes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the indexTapesByFileByTaskExecution operation.
     * @callback module:api/FilesApi~indexTapesByFileByTaskExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TapeCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays tapes containing specific file, related to the specific task.
     * **API Key Scope**: files / tapes
     * @param {String} taskExecutionId Numeric ID of task execution.
     * @param {Number} fileId Numeric ID of file.
     * @param {module:api/FilesApi~indexTapesByFileByTaskExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TapeCollection}
     */
    indexTapesByFileByTaskExecution(taskExecutionId, fileId, callback) {
      let postBody = null;
      // verify the required parameter 'taskExecutionId' is set
      if (taskExecutionId === undefined || taskExecutionId === null) {
        throw new Error("Missing the required parameter 'taskExecutionId' when calling indexTapesByFileByTaskExecution");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling indexTapesByFileByTaskExecution");
      }

      let pathParams = {
        'task_execution_id': taskExecutionId,
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TapeCollection;
      return this.apiClient.callApi(
        '/task_executions/{task_execution_id}/files/{file_id}/tapes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the indexTapesByFileByTaskExecutionByTask operation.
     * @callback module:api/FilesApi~indexTapesByFileByTaskExecutionByTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TapeCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays tapes containing specific file, related to the specific task.
     * **API Key Scope**: files / tapes
     * @param {String} taskId Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID.
     * @param {String} taskExecutionId Numeric ID of task execution.
     * @param {Number} fileId Numeric ID of file.
     * @param {module:api/FilesApi~indexTapesByFileByTaskExecutionByTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TapeCollection}
     */
    indexTapesByFileByTaskExecutionByTask(taskId, taskExecutionId, fileId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling indexTapesByFileByTaskExecutionByTask");
      }
      // verify the required parameter 'taskExecutionId' is set
      if (taskExecutionId === undefined || taskExecutionId === null) {
        throw new Error("Missing the required parameter 'taskExecutionId' when calling indexTapesByFileByTaskExecutionByTask");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling indexTapesByFileByTaskExecutionByTask");
      }

      let pathParams = {
        'task_id': taskId,
        'task_execution_id': taskExecutionId,
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TapeCollection;
      return this.apiClient.callApi(
        '/tasks/{task_id}/task_executions/{task_execution_id}/files/{file_id}/tapes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the onTapesFilesChildrenByPool operation.
     * @callback module:api/FilesApi~onTapesFilesChildrenByPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OnTapesFileCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists files under a specific folder on tape of pools, specific for Active and Offline.
     * **API Key Scope**: on_tapes_files / index
     * @param {String} poolId Numeric ID, or name of pool.
     * @param {Number} fileParentId Numeric ID of parent folder.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of items to display for pagination.
     * @param {Number} opts.offset The number of items to skip for pagination.
     * @param {String} opts.name Filter on name
     * @param {String} opts.type Filter on type
     * @param {String} opts.size Filter on size
     * @param {module:api/FilesApi~onTapesFilesChildrenByPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OnTapesFileCollection}
     */
    onTapesFilesChildrenByPool(poolId, fileParentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling onTapesFilesChildrenByPool");
      }
      // verify the required parameter 'fileParentId' is set
      if (fileParentId === undefined || fileParentId === null) {
        throw new Error("Missing the required parameter 'fileParentId' when calling onTapesFilesChildrenByPool");
      }

      let pathParams = {
        'pool_id': poolId,
        'file_parent_id': fileParentId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'name': opts['name'],
        'type': opts['type'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OnTapesFileCollection;
      return this.apiClient.callApi(
        '/pools/{pool_id}/on_tapes_files/{file_parent_id}/children', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showFile operation.
     * @callback module:api/FilesApi~showFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeumFileWithPath} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param {Number} fileId Numeric ID of file.
     * @param {module:api/FilesApi~showFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeumFileWithPath}
     */
    showFile(fileId, callback) {
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling showFile");
      }

      let pathParams = {
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeumFileWithPath;
      return this.apiClient.callApi(
        '/files/{file_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showFileByContainer operation.
     * @callback module:api/FilesApi~showFileByContainerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeumFileWithPath} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param {String} containerId Numeric ID or name of container.
     * @param {Number} fileId Numeric ID of file.
     * @param {module:api/FilesApi~showFileByContainerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeumFileWithPath}
     */
    showFileByContainer(containerId, fileId, callback) {
      let postBody = null;
      // verify the required parameter 'containerId' is set
      if (containerId === undefined || containerId === null) {
        throw new Error("Missing the required parameter 'containerId' when calling showFileByContainer");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling showFileByContainer");
      }

      let pathParams = {
        'container_id': containerId,
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeumFileWithPath;
      return this.apiClient.callApi(
        '/containers/{container_id}/files/{file_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showFileByPool operation.
     * @callback module:api/FilesApi~showFileByPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeumFileWithPath} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param {String} poolId Numeric ID, or name of pool.
     * @param {Number} fileId Numeric ID of file.
     * @param {module:api/FilesApi~showFileByPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeumFileWithPath}
     */
    showFileByPool(poolId, fileId, callback) {
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling showFileByPool");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling showFileByPool");
      }

      let pathParams = {
        'pool_id': poolId,
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeumFileWithPath;
      return this.apiClient.callApi(
        '/pools/{pool_id}/files/{file_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showFileByTask operation.
     * @callback module:api/FilesApi~showFileByTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeumFileWithPath} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param {String} taskId Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID.
     * @param {Number} fileId Numeric ID of file.
     * @param {module:api/FilesApi~showFileByTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeumFileWithPath}
     */
    showFileByTask(taskId, fileId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling showFileByTask");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling showFileByTask");
      }

      let pathParams = {
        'task_id': taskId,
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeumFileWithPath;
      return this.apiClient.callApi(
        '/tasks/{task_id}/files/{file_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showFileByTaskExecution operation.
     * @callback module:api/FilesApi~showFileByTaskExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeumFileWithPath} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param {String} taskExecutionId Numeric ID of task execution.
     * @param {Number} fileId Numeric ID of file.
     * @param {module:api/FilesApi~showFileByTaskExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeumFileWithPath}
     */
    showFileByTaskExecution(taskExecutionId, fileId, callback) {
      let postBody = null;
      // verify the required parameter 'taskExecutionId' is set
      if (taskExecutionId === undefined || taskExecutionId === null) {
        throw new Error("Missing the required parameter 'taskExecutionId' when calling showFileByTaskExecution");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling showFileByTaskExecution");
      }

      let pathParams = {
        'task_execution_id': taskExecutionId,
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeumFileWithPath;
      return this.apiClient.callApi(
        '/task_executions/{task_execution_id}/files/{file_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showFileByTaskExecutionByTask operation.
     * @callback module:api/FilesApi~showFileByTaskExecutionByTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeumFileWithPath} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param {String} taskId Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID.
     * @param {String} taskExecutionId Numeric ID of task execution.
     * @param {Number} fileId Numeric ID of file.
     * @param {module:api/FilesApi~showFileByTaskExecutionByTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeumFileWithPath}
     */
    showFileByTaskExecutionByTask(taskId, taskExecutionId, fileId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling showFileByTaskExecutionByTask");
      }
      // verify the required parameter 'taskExecutionId' is set
      if (taskExecutionId === undefined || taskExecutionId === null) {
        throw new Error("Missing the required parameter 'taskExecutionId' when calling showFileByTaskExecutionByTask");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling showFileByTaskExecutionByTask");
      }

      let pathParams = {
        'task_id': taskId,
        'task_execution_id': taskExecutionId,
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeumFileWithPath;
      return this.apiClient.callApi(
        '/tasks/{task_id}/task_executions/{task_execution_id}/files/{file_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showImportFileByPool operation.
     * @callback module:api/FilesApi~showImportFileByPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportFileWithPath} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays a specific file on tape of pools, specific for Data Exchange.
     * **API Key Scope**: import_files / show
     * @param {String} poolId Numeric ID, or name of pool.
     * @param {Number} fileId Numeric ID of file.
     * @param {module:api/FilesApi~showImportFileByPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportFileWithPath}
     */
    showImportFileByPool(poolId, fileId, callback) {
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling showImportFileByPool");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling showImportFileByPool");
      }

      let pathParams = {
        'pool_id': poolId,
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImportFileWithPath;
      return this.apiClient.callApi(
        '/pools/{pool_id}/import_files/{file_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showOnTapeFileByPool operation.
     * @callback module:api/FilesApi~showOnTapeFileByPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OnTapesFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays a specific file on tape of pools, specific for Active and Offline.
     * **API Key Scope**: on_tapes_files / show
     * @param {String} poolId Numeric ID, or name of pool.
     * @param {Number} fileId Numeric ID of file.
     * @param {module:api/FilesApi~showOnTapeFileByPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OnTapesFile}
     */
    showOnTapeFileByPool(poolId, fileId, callback) {
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling showOnTapeFileByPool");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling showOnTapeFileByPool");
      }

      let pathParams = {
        'pool_id': poolId,
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OnTapesFile;
      return this.apiClient.callApi(
        '/pools/{pool_id}/on_tapes_files/{file_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
