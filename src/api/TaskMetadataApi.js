/**
 * Nodeum API
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import TaskMetadatum from '../model/TaskMetadatum';
import TaskMetadatumCollection from '../model/TaskMetadatumCollection';

/**
* TaskMetadata service.
* @module api/TaskMetadataApi
* @version 1.87.0
*/
export default class TaskMetadataApi {

    /**
    * Constructs a new TaskMetadataApi. 
    * @alias module:api/TaskMetadataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTaskMetadatum operation.
     * @callback module:api/TaskMetadataApi~createTaskMetadatumCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskMetadatum} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new task metadatum.
     * **API Key Scope**: task_metadata / create
     * @param {String} taskId Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID.
     * @param {module:model/TaskMetadatum} taskMetadatumBody 
     * @param {module:api/TaskMetadataApi~createTaskMetadatumCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskMetadatum}
     */
    createTaskMetadatum(taskId, taskMetadatumBody, callback) {
      let postBody = taskMetadatumBody;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling createTaskMetadatum");
      }
      // verify the required parameter 'taskMetadatumBody' is set
      if (taskMetadatumBody === undefined || taskMetadatumBody === null) {
        throw new Error("Missing the required parameter 'taskMetadatumBody' when calling createTaskMetadatum");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TaskMetadatum;
      return this.apiClient.callApi(
        '/tasks/{task_id}/task_metadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destroyTaskMetadatum operation.
     * @callback module:api/TaskMetadataApi~destroyTaskMetadatumCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Destroys a specific task metadatum.
     * **API Key Scope**: task_metadata / destroy
     * @param {String} taskId Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID.
     * @param {Number} taskMetadatumId Numeric ID of task metadatum.
     * @param {module:api/TaskMetadataApi~destroyTaskMetadatumCallback} callback The callback function, accepting three arguments: error, data, response
     */
    destroyTaskMetadatum(taskId, taskMetadatumId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling destroyTaskMetadatum");
      }
      // verify the required parameter 'taskMetadatumId' is set
      if (taskMetadatumId === undefined || taskMetadatumId === null) {
        throw new Error("Missing the required parameter 'taskMetadatumId' when calling destroyTaskMetadatum");
      }

      let pathParams = {
        'task_id': taskId,
        'task_metadatum_id': taskMetadatumId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{task_id}/task_metadata/{task_metadatum_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the indexTaskMetadata operation.
     * @callback module:api/TaskMetadataApi~indexTaskMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskMetadatumCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all task metadata.
     * **API Key Scope**: task_metadata / index
     * @param {String} taskId Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of items to display for pagination.
     * @param {Number} opts.offset The number of items to skip for pagination.
     * @param {Array.<String>} opts.sortBy Sort results by attribute.  Can sort on multiple attributes, separated by `|`. Order direction can be suffixing the attribute by either `:asc` (default) or `:desc`.
     * @param {String} opts.id Filter on id
     * @param {String} opts.key Filter on key
     * @param {String} opts.value Filter on value
     * @param {module:api/TaskMetadataApi~indexTaskMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskMetadatumCollection}
     */
    indexTaskMetadata(taskId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling indexTaskMetadata");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort_by': this.apiClient.buildCollectionParam(opts['sortBy'], 'pipe'),
        'id': opts['id'],
        'key': opts['key'],
        'value': opts['value']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TaskMetadatumCollection;
      return this.apiClient.callApi(
        '/tasks/{task_id}/task_metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showTaskMetadatum operation.
     * @callback module:api/TaskMetadataApi~showTaskMetadatumCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskMetadatum} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays a specific task metadatum.
     * **API Key Scope**: task_metadata / show
     * @param {String} taskId Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID.
     * @param {Number} taskMetadatumId Numeric ID of task metadatum.
     * @param {module:api/TaskMetadataApi~showTaskMetadatumCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskMetadatum}
     */
    showTaskMetadatum(taskId, taskMetadatumId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling showTaskMetadatum");
      }
      // verify the required parameter 'taskMetadatumId' is set
      if (taskMetadatumId === undefined || taskMetadatumId === null) {
        throw new Error("Missing the required parameter 'taskMetadatumId' when calling showTaskMetadatum");
      }

      let pathParams = {
        'task_id': taskId,
        'task_metadatum_id': taskMetadatumId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TaskMetadatum;
      return this.apiClient.callApi(
        '/tasks/{task_id}/task_metadata/{task_metadatum_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTaskMetadatum operation.
     * @callback module:api/TaskMetadataApi~updateTaskMetadatumCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskMetadatum} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a specific task metadatum.
     * **API Key Scope**: task_metadata / update
     * @param {String} taskId Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID.
     * @param {Number} taskMetadatumId Numeric ID of task metadatum.
     * @param {module:model/TaskMetadatum} taskMetadatumBody 
     * @param {module:api/TaskMetadataApi~updateTaskMetadatumCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskMetadatum}
     */
    updateTaskMetadatum(taskId, taskMetadatumId, taskMetadatumBody, callback) {
      let postBody = taskMetadatumBody;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling updateTaskMetadatum");
      }
      // verify the required parameter 'taskMetadatumId' is set
      if (taskMetadatumId === undefined || taskMetadatumId === null) {
        throw new Error("Missing the required parameter 'taskMetadatumId' when calling updateTaskMetadatum");
      }
      // verify the required parameter 'taskMetadatumBody' is set
      if (taskMetadatumBody === undefined || taskMetadatumBody === null) {
        throw new Error("Missing the required parameter 'taskMetadatumBody' when calling updateTaskMetadatum");
      }

      let pathParams = {
        'task_id': taskId,
        'task_metadatum_id': taskMetadatumId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TaskMetadatum;
      return this.apiClient.callApi(
        '/tasks/{task_id}/task_metadata/{task_metadatum_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
