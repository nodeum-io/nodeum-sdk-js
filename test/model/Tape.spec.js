/**
 * Nodeum API
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NodeumSdk);
  }
}(this, function(expect, NodeumSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NodeumSdk.Tape();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Tape', function() {
    it('should create an instance of Tape', function() {
      // uncomment below and update the code to test Tape
      //var instane = new NodeumSdk.Tape();
      //expect(instance).to.be.a(NodeumSdk.Tape);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new NodeumSdk.Tape();
      //expect(instance).to.be();
    });

    it('should have the property tapeLibraryId (base name: "tape_library_id")', function() {
      // uncomment below and update the code to test the property tapeLibraryId
      //var instane = new NodeumSdk.Tape();
      //expect(instance).to.be();
    });

    it('should have the property poolId (base name: "pool_id")', function() {
      // uncomment below and update the code to test the property poolId
      //var instane = new NodeumSdk.Tape();
      //expect(instance).to.be();
    });

    it('should have the property barcode (base name: "barcode")', function() {
      // uncomment below and update the code to test the property barcode
      //var instane = new NodeumSdk.Tape();
      //expect(instance).to.be();
    });

    it('should have the property location (base name: "location")', function() {
      // uncomment below and update the code to test the property location
      //var instane = new NodeumSdk.Tape();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new NodeumSdk.Tape();
      //expect(instance).to.be();
    });

    it('should have the property locked (base name: "locked")', function() {
      // uncomment below and update the code to test the property locked
      //var instane = new NodeumSdk.Tape();
      //expect(instance).to.be();
    });

    it('should have the property scratch (base name: "scratch")', function() {
      // uncomment below and update the code to test the property scratch
      //var instane = new NodeumSdk.Tape();
      //expect(instance).to.be();
    });

    it('should have the property cleaning (base name: "cleaning")', function() {
      // uncomment below and update the code to test the property cleaning
      //var instane = new NodeumSdk.Tape();
      //expect(instance).to.be();
    });

    it('should have the property writeProtect (base name: "write_protect")', function() {
      // uncomment below and update the code to test the property writeProtect
      //var instane = new NodeumSdk.Tape();
      //expect(instance).to.be();
    });

    it('should have the property mounted (base name: "mounted")', function() {
      // uncomment below and update the code to test the property mounted
      //var instane = new NodeumSdk.Tape();
      //expect(instance).to.be();
    });

    it('should have the property ejected (base name: "ejected")', function() {
      // uncomment below and update the code to test the property ejected
      //var instane = new NodeumSdk.Tape();
      //expect(instance).to.be();
    });

    it('should have the property known (base name: "known")', function() {
      // uncomment below and update the code to test the property known
      //var instane = new NodeumSdk.Tape();
      //expect(instance).to.be();
    });

    it('should have the property mountCount (base name: "mount_count")', function() {
      // uncomment below and update the code to test the property mountCount
      //var instane = new NodeumSdk.Tape();
      //expect(instance).to.be();
    });

    it('should have the property dateIn (base name: "date_in")', function() {
      // uncomment below and update the code to test the property dateIn
      //var instane = new NodeumSdk.Tape();
      //expect(instance).to.be();
    });

    it('should have the property dateMove (base name: "date_move")', function() {
      // uncomment below and update the code to test the property dateMove
      //var instane = new NodeumSdk.Tape();
      //expect(instance).to.be();
    });

    it('should have the property free (base name: "free")', function() {
      // uncomment below and update the code to test the property free
      //var instane = new NodeumSdk.Tape();
      //expect(instance).to.be();
    });

    it('should have the property max (base name: "max")', function() {
      // uncomment below and update the code to test the property max
      //var instane = new NodeumSdk.Tape();
      //expect(instance).to.be();
    });

    it('should have the property lastSizeUpdate (base name: "last_size_update")', function() {
      // uncomment below and update the code to test the property lastSizeUpdate
      //var instane = new NodeumSdk.Tape();
      //expect(instance).to.be();
    });

    it('should have the property lastMaintenance (base name: "last_maintenance")', function() {
      // uncomment below and update the code to test the property lastMaintenance
      //var instane = new NodeumSdk.Tape();
      //expect(instance).to.be();
    });

    it('should have the property lastRepack (base name: "last_repack")', function() {
      // uncomment below and update the code to test the property lastRepack
      //var instane = new NodeumSdk.Tape();
      //expect(instance).to.be();
    });

    it('should have the property repackStatus (base name: "repack_status")', function() {
      // uncomment below and update the code to test the property repackStatus
      //var instane = new NodeumSdk.Tape();
      //expect(instance).to.be();
    });

    it('should have the property hash (base name: "hash")', function() {
      // uncomment below and update the code to test the property hash
      //var instane = new NodeumSdk.Tape();
      //expect(instance).to.be();
    });

    it('should have the property forceImportType (base name: "force_import_type")', function() {
      // uncomment below and update the code to test the property forceImportType
      //var instane = new NodeumSdk.Tape();
      //expect(instance).to.be();
    });

    it('should have the property needToCheck (base name: "need_to_check")', function() {
      // uncomment below and update the code to test the property needToCheck
      //var instane = new NodeumSdk.Tape();
      //expect(instance).to.be();
    });

  });

}));
