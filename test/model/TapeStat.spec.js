/**
 * Nodeum API
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NodeumSdk);
  }
}(this, function(expect, NodeumSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NodeumSdk.TapeStat();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TapeStat', function() {
    it('should create an instance of TapeStat', function() {
      // uncomment below and update the code to test TapeStat
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be.a(NodeumSdk.TapeStat);
    });

    it('should have the property logTime (base name: "log_time")', function() {
      // uncomment below and update the code to test the property logTime
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property barcode (base name: "barcode")', function() {
      // uncomment below and update the code to test the property barcode
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property mounts (base name: "mounts")', function() {
      // uncomment below and update the code to test the property mounts
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property datasetsWritten (base name: "datasets_written")', function() {
      // uncomment below and update the code to test the property datasetsWritten
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property datasetsRead (base name: "datasets_read")', function() {
      // uncomment below and update the code to test the property datasetsRead
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property recoveredWriteDataErrors (base name: "recovered_write_data_errors")', function() {
      // uncomment below and update the code to test the property recoveredWriteDataErrors
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property unrecoveredWriteDataErrors (base name: "unrecovered_write_data_errors")', function() {
      // uncomment below and update the code to test the property unrecoveredWriteDataErrors
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property writeServoErrors (base name: "write_servo_errors")', function() {
      // uncomment below and update the code to test the property writeServoErrors
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property unrecoveredWriteServoErrors (base name: "unrecovered_write_servo_errors")', function() {
      // uncomment below and update the code to test the property unrecoveredWriteServoErrors
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property recoveredReadErrors (base name: "recovered_read_errors")', function() {
      // uncomment below and update the code to test the property recoveredReadErrors
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property unrecoveredReadErrors (base name: "unrecovered_read_errors")', function() {
      // uncomment below and update the code to test the property unrecoveredReadErrors
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property lastMountUnrecoveredWriteErrors (base name: "last_mount_unrecovered_write_errors")', function() {
      // uncomment below and update the code to test the property lastMountUnrecoveredWriteErrors
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property lastMountUnrecoveredReadErrors (base name: "last_mount_unrecovered_read_errors")', function() {
      // uncomment below and update the code to test the property lastMountUnrecoveredReadErrors
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property lastMountMbytesWritten (base name: "last_mount_mbytes_written")', function() {
      // uncomment below and update the code to test the property lastMountMbytesWritten
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property lastMountMbytesRead (base name: "last_mount_mbytes_read")', function() {
      // uncomment below and update the code to test the property lastMountMbytesRead
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property lifetimeMbytesWritten (base name: "lifetime_mbytes_written")', function() {
      // uncomment below and update the code to test the property lifetimeMbytesWritten
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property lifetimeMbytesRead (base name: "lifetime_mbytes_read")', function() {
      // uncomment below and update the code to test the property lifetimeMbytesRead
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property lastLoadWriteCompressionRatio (base name: "last_load_write_compression_ratio")', function() {
      // uncomment below and update the code to test the property lastLoadWriteCompressionRatio
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property lastLoadReadCompressionRatio (base name: "last_load_read_compression_ratio")', function() {
      // uncomment below and update the code to test the property lastLoadReadCompressionRatio
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property mediumMountTime (base name: "medium_mount_time")', function() {
      // uncomment below and update the code to test the property mediumMountTime
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property mediumReadyTime (base name: "medium_ready_time")', function() {
      // uncomment below and update the code to test the property mediumReadyTime
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property totalNativeCapacity (base name: "total_native_capacity")', function() {
      // uncomment below and update the code to test the property totalNativeCapacity
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property totalUsedNativeCapacity (base name: "total_used_native_capacity")', function() {
      // uncomment below and update the code to test the property totalUsedNativeCapacity
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property writeProtect (base name: "write_protect")', function() {
      // uncomment below and update the code to test the property writeProtect
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property worm (base name: "worm")', function() {
      // uncomment below and update the code to test the property worm
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property beginningOfMediumPasses (base name: "beginning_of_medium_passes")', function() {
      // uncomment below and update the code to test the property beginningOfMediumPasses
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property middleOfTapePasses (base name: "middle_of_tape_passes")', function() {
      // uncomment below and update the code to test the property middleOfTapePasses
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property readCompressionRatio (base name: "read_compression_ratio")', function() {
      // uncomment below and update the code to test the property readCompressionRatio
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property writeCompressionRatio (base name: "write_compression_ratio")', function() {
      // uncomment below and update the code to test the property writeCompressionRatio
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property mbytesTransferredToAppClient (base name: "mbytes_transferred_to_app_client")', function() {
      // uncomment below and update the code to test the property mbytesTransferredToAppClient
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property bytesTransferredToAppClient (base name: "bytes_transferred_to_app_client")', function() {
      // uncomment below and update the code to test the property bytesTransferredToAppClient
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property mbytesReadFromMedium (base name: "mbytes_read_from_medium")', function() {
      // uncomment below and update the code to test the property mbytesReadFromMedium
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property bytesReadFromMedium (base name: "bytes_read_from_medium")', function() {
      // uncomment below and update the code to test the property bytesReadFromMedium
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property mbytesTransferredFromAppClient (base name: "mbytes_transferred_from_app_client")', function() {
      // uncomment below and update the code to test the property mbytesTransferredFromAppClient
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property bytesTransferredFromAppClient (base name: "bytes_transferred_from_app_client")', function() {
      // uncomment below and update the code to test the property bytesTransferredFromAppClient
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property mbytesWrittenToMedium (base name: "mbytes_written_to_medium")', function() {
      // uncomment below and update the code to test the property mbytesWrittenToMedium
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property bytesWrittenToMedium (base name: "bytes_written_to_medium")', function() {
      // uncomment below and update the code to test the property bytesWrittenToMedium
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property dataCompressionEnabled (base name: "data_compression_enabled")', function() {
      // uncomment below and update the code to test the property dataCompressionEnabled
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property writeRetries (base name: "write_retries")', function() {
      // uncomment below and update the code to test the property writeRetries
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property writePerms (base name: "write_perms")', function() {
      // uncomment below and update the code to test the property writePerms
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property suspendedWrites (base name: "suspended_writes")', function() {
      // uncomment below and update the code to test the property suspendedWrites
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property fatalSuspendedWrites (base name: "fatal_suspended_writes")', function() {
      // uncomment below and update the code to test the property fatalSuspendedWrites
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property readRetries (base name: "read_retries")', function() {
      // uncomment below and update the code to test the property readRetries
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property readPerms (base name: "read_perms")', function() {
      // uncomment below and update the code to test the property readPerms
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property suspendedReads (base name: "suspended_reads")', function() {
      // uncomment below and update the code to test the property suspendedReads
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property fatalSuspendedReads (base name: "fatal_suspended_reads")', function() {
      // uncomment below and update the code to test the property fatalSuspendedReads
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property partition0RemainingCapacity (base name: "partition_0_remaining_capacity")', function() {
      // uncomment below and update the code to test the property partition0RemainingCapacity
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property partition1RemainingCapacity (base name: "partition_1_remaining_capacity")', function() {
      // uncomment below and update the code to test the property partition1RemainingCapacity
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property partition0MaximumCapacity (base name: "partition_0_maximum_capacity")', function() {
      // uncomment below and update the code to test the property partition0MaximumCapacity
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

    it('should have the property partition1MaximumCapacity (base name: "partition_1_maximum_capacity")', function() {
      // uncomment below and update the code to test the property partition1MaximumCapacity
      //var instane = new NodeumSdk.TapeStat();
      //expect(instance).to.be();
    });

  });

}));
